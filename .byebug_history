exit
error
exit
message
error
exit
serialization
exit
serialization.serializable_hash
exit
serialization
exit
serializer.claimant.to_json
serializer.to_json
serializer
JSON.parse(serialization)
serialization
exit
serializerexit
serializer["Data"]
serializer
exit
serialization
exit
serialization.as_json
ActiveModelSerializers::Adapter.create(serializer)
serializer
claimant
exit
subject
c
message_payload[name.to_sym]
message_payload[:name]
message_payload[name]
message_payload[":#{name}"]
value = message_payload[name] || message_payload[":#{name}"]
c
value = message_payload[:claim_id]
value = message_payload["claim_id"]
value = message_payload["#{name}"]
value = message_payload[name.to_s]
value = message_payload[name] || message_payload[name.to_s]
exit
value = message_payload[:claim_id]
value = message_payload[name]
type
name
c
message_payload
c
unknown_attributes = attribute_names.reject { |attr| attribute_types.key?(attr) }
attribute_names
c
attribute_names
c
unknown_attributes = attribute_names.reject { |attr| attribute_types.transform_keys(&:to_s).key?(attr) }
c
attribute_types.each_key { |key| p "#{key.to_s}" }c
attribute_types.each_key { |key| p "#{key.to_s}" }
attribute_types.each_key { |key| puts "#{key.to_s}" }
attribute_types.each_key { |key| puts key.to_s }
attribute_types.each_key { |key| puts key }
attribute_types.each_key { |key} puts key }
attribute_types.each { |key, value| puts "#{key} #{value}" }
attribute_types.each { |key, value| puts key value}
attribute_types.each_key(&:to_s)
unknown_attributes = attribute_names.reject { |attr| attribute_types.each_key(&:to_s).key?(attr) }
c
unknown_attributes = attribute_names.reject { |attr| attribute_types.each_key(&:to_s).key?(attr) }
c
reload!
attribute_types.keys
attribute_types.key?
unknown_attributes = attribute_names.reject { |attr| attribute_types.key?(attr) }
attribute_names
exit
c
reload!
    unknown_attributes = message_payload.keys.reject do |attr|
      attribute_types.each { |name, type| name.to_s.key?(attr) }
    end
    unknown_attributes = attribute_names.reject do |attr|
      attribute_types.each { |name, type| name.to_s.key?(attr) }
    end
attribute_types.map(&:cto_s).keys
attribute_types.map(&:to_s).keys
attribute_types.keys
message_payload.keys
c
attribute_names
    unknown_attributes = attribute_names.reject { |attr| attribute_types.key?(attr) }
message_payload
exit
reload!
message_payload
exit
c
n
nn
n
c
n
c
    AvroTurf::Messaging::DecodedMessage.new(decoded_message.schema_id,
                                            decoded_message.writer_schema,
                                            decoded_message.reader_schema,
                                            transformed_message_payload)
transformed_message_payload
c
AvroTurf::Messaging::DecodedMessage.new(decoded_message.schema_id,
                                            decoded_message.writer_schema,
                                            decoded_message.reader_schema,
                                            transformed_message_payload)
    transformed_message_payload = transform_payload_to_snakecase(decoded_message)
    decoded_message = decode_avro_message(message)
    AvroTurf::Messaging::DecodedMessage.new(decoded_message.schema_id,
                                            decoded_message.writer_schema,
                                            decoded_message.reader_schema,
                                            transformed_message_payload)
message
q
decoded_message = decode_avro_message(message)
message
c
exit
Karafka::Base::Message.new
Karafka::Messages::Message.new
message
c
message
message.raw_payload
message
message.payload.message
message.payload
message
exit
pp message.deserializer
pp message.payload.message[:claim_id]
pp message.payload.message
pp message.payload[:claim_id]
pp message.payload
message.payload
pp message
message
exit
c
exit
n
s
n
c
message.message
message
exit
AvroDeserializerService.call(encoded_message)
encoded_message
message
encoded_message = AvroService.new.encode(message, "DecisionReviewCreated")
payload
encoded_message = AvroService.new.encode(payload, "DecisionReviewCreated")
message =       {
        claim_id: 1_234_567,
        decision_review_type: "HigherLevelReview",
        veteran_first_name: "John",
        veteran_last_name: "Smith",
        veteran_participant_id: "123456789",
        file_number: "123456789",
        claimant_participant_id: "01010101",
        ep_code: "030HLRNR",
        ep_code_category: "Rating",
        claim_received_date: Date.new(2022, 1, 1),
        claim_lifecycle_status: "RFD",
        payee_code: "00",
        modifier: "01",
        originated_from_vacols_issue: false,
        informal_conference_requested: false,
        same_station_review_requested: false,
        intake_creation_time: Time.now.utc,
        claim_creation_time: Time.now.utc,
        created_by_username: "BVADWISE101",
        created_by_station: "101",
        created_by_application: "PASYSACCTCREATE",
        decision_review_issues: [
          {
            contention_id: 123_456_789,
            associated_caseflow_request_issue_id: nil,
            unidentified: false,
            prior_rating_decision_id: nil,
            prior_non_rating_decision_id: 12,
            prior_decision_text: "service connection for tetnus denied",
            prior_decision_type: "DIC",
            prior_decision_notification_date: Date.new(2022, 1, 1),
            prior_decision_diagnostic_code: nil,
            prior_decision_rating_percentage: nil,
            eligible: true,
            eligibility_result: "ELIGIBLE",
            time_override: nil,
            time_override_reason: nil,
            contested: nil,
            soc_opt_in: nil,
            legacy_appeal_id: nil,
            legacy_appeal_issue_id: nil
          },
          {
            contention_id: 987_654_321,
            associated_caseflow_request_issue_id: nil,
            unidentified: false,
            prior_rating_decision_id: nil,
            prior_non_rating_decision_id: 13,
            prior_decision_text: "service connection for ear infection denied",
            prior_decision_type: "Basic Eligibility",
            prior_decision_notification_date: Date.new(2022, 1, 1),
            prior_decision_diagnostic_code: nil,
            prior_decision_rating_percentage: nil,
            eligible: true,
            eligibility_result: "ELIGIBLE",
            time_override: nil,
            time_override_reason: nil,
            contested: nil,
            soc_opt_in: nil,
            legacy_appeal_id: nil,
            legacy_appeal_issue_id: nil
          }
        ]
      }.deep_transform_keys { |key| key.to_s.camelize(:lower) }
payload
message
payload
message.raw_payload
message
